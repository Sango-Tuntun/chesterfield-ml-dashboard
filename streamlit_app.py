{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0bff6784-4f44-437e-93f9-79cb22ce73d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-03-21 21:04:40.299 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:41.967 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\GRAPH\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-03-21 21:04:41.967 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:41.967 No runtime found, using MemoryCacheStorageManager\n",
      "2025-03-21 21:04:41.967 No runtime found, using MemoryCacheStorageManager\n",
      "2025-03-21 21:04:41.977 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:41.977 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:41.981 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:42.486 Thread 'Thread-3': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:42.491 Thread 'Thread-3': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.005 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.007 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.009 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.010 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.018 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.018 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.020 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.023 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.023 Session state does not function when running a script without `streamlit run`\n",
      "2025-03-21 21:04:43.024 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.025 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.026 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.026 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.034 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.036 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.037 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.038 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.038 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:43.039 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:44.127 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:44.128 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:44.130 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-03-21 21:04:44.131 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "import xgboost as xgb\n",
    "\n",
    "# ✅ Load Player Data\n",
    "st.title(\"🏆 Chesterfield Park FC - Football ML Insights Dashboard ⚽\")\n",
    "file_path = \"C:/Users/GRAPH/Documents/Mac Omoluabi/AI Data Specialist/5. Applied Machine Intelligence/Chelsfield Park FC - Player Dataset.xlsx\"\n",
    "\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    return pd.read_excel(file_path)\n",
    "\n",
    "df = load_data()\n",
    "st.sidebar.header(\"⚡ Select Analysis\")\n",
    "\n",
    "# ✅ Convert necessary columns to numeric\n",
    "df.fillna(0, inplace=True)\n",
    "numeric_cols = ['PPG', 'GS', 'MCW', 'MCL', 'CWLS', 'TGD', 'ATGS', 'ATGC', 'CS%']\n",
    "df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, errors='coerce')\n",
    "\n",
    "# ✅ Machine Learning Analysis\n",
    "ml_options = [\"Honours Board\", \"Streak & Momentum Analysis\", \"Match Outcome Predictions\"]\n",
    "selected_ml = st.sidebar.radio(\"Select ML Application:\", ml_options)\n",
    "\n",
    "# 📌 Honours Board Analysis\n",
    "if selected_ml == \"Honours Board\":\n",
    "    st.header(\"🏅 Dynamic Honours Board Rankings\")\n",
    "    categories = {\n",
    "        \"The Playmaker\": (0.5 * df['ATGS'] + 0.3 * df['GS'] + 0.2 * df['PPG']),\n",
    "        \"The Fortress\": (0.5 * df['CS%'] + 0.3 * df['ATGC'] + 0.2 * df['PPG']),\n",
    "        \"The Clutch Player\": (0.5 * df['MCW'] + 0.3 * df['CWLS'].apply(lambda x: max(x, 0)) + 0.2 * df['PPG']),\n",
    "        \"The Finisher\": (0.6 * df['GS'] + 0.3 * df['GS'] + 0.1 * df['HT']),\n",
    "        \"The Ironman\": (0.5 * df['PPG'] + 0.3 * df['CWLS'] - 0.2 * df['MCL']),\n",
    "        \"The X-Factor\": (0.4 * df['TGD'] + 0.3 * df['CS%'] + 0.3 * (1 - df['CWLS']))\n",
    "    }\n",
    "    \n",
    "    category = st.selectbox(\"🏆 Choose Award\", list(categories.keys()))\n",
    "    df['Award_Score'] = categories[category]\n",
    "    rankings = df[['Player Name', 'Award_Score']].sort_values(by='Award_Score', ascending=False).head(10)\n",
    "    \n",
    "    st.bar_chart(rankings.set_index('Player Name'))\n",
    "\n",
    "# 📌 Streak & Momentum Analysis\n",
    "elif selected_ml == \"Streak & Momentum Analysis\":\n",
    "    st.header(\"🔥 Streak Analysis & Momentum Prediction\")\n",
    "    df['Winning_Streak'] = df['MCW']\n",
    "    df['Losing_Streak'] = df['MCL']\n",
    "    df['Goal_Scoring_Streak'] = df['GS'].rolling(window=3, min_periods=1).sum()\n",
    "    df['Draw_Streak'] = df['CWLS'].apply(lambda x: x if x > 0 else 0)\n",
    "\n",
    "    df['Momentum'] = df.apply(lambda row: 1 if row['Winning_Streak'] >= 3 or row['Draw_Streak'] >= 3 else 0, axis=1)\n",
    "\n",
    "    streak_options = [\"Winning Streak\", \"Drawing Streak\", \"Losing Streak\", \"Goal-Scoring Streak\"]\n",
    "    streak_type = st.selectbox(\"📈 Select Streak Type\", streak_options)\n",
    "    \n",
    "    streak_map = {\n",
    "        \"Winning Streak\": \"Winning_Streak\",\n",
    "        \"Drawing Streak\": \"Draw_Streak\",\n",
    "        \"Losing Streak\": \"Losing_Streak\",\n",
    "        \"Goal-Scoring Streak\": \"Goal_Scoring_Streak\"\n",
    "    }\n",
    "    \n",
    "    top_players = df[['Player Name', streak_map[streak_type]]].sort_values(by=streak_map[streak_type], ascending=False).head(10)\n",
    "    st.bar_chart(top_players.set_index('Player Name'))\n",
    "\n",
    "# 📌 Match Outcome Predictions\n",
    "elif selected_ml == \"Match Outcome Predictions\":\n",
    "    st.header(\"📊 Match Outcome Predictions\")\n",
    "    features = ['PPG', 'Winning_Streak', 'Goal_Scoring_Streak']\n",
    "    X = df[features]\n",
    "    y = df['Momentum']\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "    model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    model.fit(X_train, y_train)\n",
    "    \n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    st.write(f\"⚡ ML Model Accuracy: {accuracy_score(y_test, y_pred):.2f}\")\n",
    "    st.text(classification_report(y_test, y_pred))\n",
    "    \n",
    "    player_to_predict = st.selectbox(\"🔮 Select Player to Predict Streak:\", df['Player Name'])\n",
    "    player_data = df[df['Player Name'] == player_to_predict][features]\n",
    "    \n",
    "    if not player_data.empty:\n",
    "        prediction = model.predict(player_data)\n",
    "        prediction_text = \"🔥 Likely to Continue Streak\" if prediction[0] == 1 else \"❄️ Likely to Break Streak\"\n",
    "        st.subheader(f\"{player_to_predict} - {prediction_text}\")\n",
    "\n",
    "st.success(\"✅ Insights Updated! Select another ML application from the sidebar.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "56dfdd3a-21bd-4f9a-91a8-5b7ecde8ab93",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
